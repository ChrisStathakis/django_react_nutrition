{"ast":null,"code":"import axios from 'axios';\nimport { BASE_URL, REFRESH_TOKEN_ENDPOINT } from \"./endpoints\";\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  timeout: 5000,\n  headers: {\n    'Authorization': localStorage.getItem('access_token') ? \"Bearer  \" + localStorage.getItem('access_token') : null,\n    'Content-Type': 'application/json',\n    'accept': 'application/json'\n  }\n});\naxiosInstance.interceptors.response.use(response => response, error => {\n  const originalRequest = error.config;\n\n  if (!error.response) {\n    return Promise.reject({\n      message: 'Wrong'\n    });\n    console.log('Wrong');\n  } // Prevent infinite loops early\n\n\n  if (error.response.status === 401 && originalRequest.url === REFRESH_TOKEN_ENDPOINT) {\n    window.location.href = '/login/';\n    return Promise.reject({\n      message: '401 Exception'\n    });\n  }\n\n  if (error.response.data.code === \"token_not_valid\" && error.response.status === 401 && error.response.statusText === \"Unauthorized\") {\n    const refreshToken = localStorage.getItem('refresh_token');\n    console.log('here!!', refreshToken);\n\n    if (typeof refreshToken == 'undefined') {\n      console.log('unde'); // logout();\n\n      return Promise.reject({\n        message: 'logout'\n      });\n    }\n\n    if (refreshToken) {\n      console.log('continue');\n      const tokenParts = JSON.parse(atob(refreshToken.split('.')[1])); // exp date in token is expressed in seconds, while now() returns milliseconds:\n\n      const now = Math.ceil(Date.now() / 1000);\n      console.log(tokenParts.exp);\n\n      if (tokenParts.exp > now) {\n        return axiosInstance.post('/token/refresh/', {\n          refresh: refreshToken\n        }).then(response => {\n          localStorage.setItem('access_token', response.data.access);\n          axiosInstance.defaults.headers['Authorization'] = \"Bearer \" + response.data.access;\n          originalRequest.headers['Authorization'] = \"Bearer \" + response.data.access;\n          return axiosInstance(originalRequest);\n        }).catch(err => {\n          console.log(err);\n        });\n      } else {\n        console.log(\"Refresh token is expired\", tokenParts.exp, now);\n        window.location.href = '/login/';\n      }\n    } else {\n      console.log(\"Refresh token not available.\");\n      window.location.href = '/login/';\n    }\n  } // specific error handling done elsewhere\n\n\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"sources":["C:/Users/Zefarak/Desktop/projects/django_react_nutrition/frontend/src/tools/helpers.js"],"names":["axios","BASE_URL","REFRESH_TOKEN_ENDPOINT","axiosInstance","create","baseURL","timeout","headers","localStorage","getItem","interceptors","response","use","error","originalRequest","config","Promise","reject","message","console","log","status","url","window","location","href","data","code","statusText","refreshToken","tokenParts","JSON","parse","atob","split","now","Math","ceil","Date","exp","post","refresh","then","setItem","access","defaults","catch","err"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {BASE_URL, REFRESH_TOKEN_ENDPOINT} from \"./endpoints\";\r\n\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: BASE_URL,\r\n    timeout: 5000,\r\n    headers: {\r\n        'Authorization': localStorage.getItem('access_token') ? \"Bearer  \" + localStorage.getItem('access_token') : null,\r\n        'Content-Type': 'application/json',\r\n        'accept': 'application/json'\r\n    }\r\n});\r\n\r\naxiosInstance.interceptors.response.use(\r\n    response => response,\r\n    error => {\r\n        const originalRequest = error.config;\r\n\r\n        if (!error.response){\r\n            return Promise.reject({message: 'Wrong'});\r\n            console.log('Wrong')\r\n        }\r\n\r\n        // Prevent infinite loops early\r\n        if (error.response.status === 401 && originalRequest.url === REFRESH_TOKEN_ENDPOINT) {\r\n            window.location.href = '/login/';\r\n            return Promise.reject({message: '401 Exception'});\r\n        }\r\n\r\n        if (error.response.data.code === \"token_not_valid\" &&\r\n            error.response.status === 401 &&\r\n            error.response.statusText === \"Unauthorized\")\r\n            {\r\n                const refreshToken = localStorage.getItem('refresh_token');\r\n                console.log('here!!', refreshToken);\r\n                if (typeof refreshToken == 'undefined'){\r\n                    console.log('unde');\r\n                    // logout();\r\n                    return Promise.reject({message: 'logout'})\r\n                }\r\n\r\n                if (refreshToken){\r\n                    console.log('continue');\r\n                    const tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\r\n\r\n                    // exp date in token is expressed in seconds, while now() returns milliseconds:\r\n                    const now = Math.ceil(Date.now() / 1000);\r\n                    console.log(tokenParts.exp);\r\n\r\n                    if (tokenParts.exp > now) {\r\n                        return axiosInstance\r\n                        .post('/token/refresh/', {refresh: refreshToken})\r\n                        .then((response) => {\r\n\r\n                            localStorage.setItem('access_token', response.data.access);\r\n                            axiosInstance.defaults.headers['Authorization'] = \"Bearer \" + response.data.access;\r\n                            originalRequest.headers['Authorization'] = \"Bearer \" + response.data.access;\r\n\r\n                            return axiosInstance(originalRequest);\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err)\r\n                        });\r\n                    }else{\r\n                        console.log(\"Refresh token is expired\", tokenParts.exp, now);\r\n                        window.location.href = '/login/';\r\n                    }\r\n                }else{\r\n                    console.log(\"Refresh token not available.\")\r\n                    window.location.href = '/login/';\r\n                }\r\n        }\r\n\r\n\r\n      // specific error handling done elsewhere\r\n      return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;"]},"metadata":{},"sourceType":"module"}